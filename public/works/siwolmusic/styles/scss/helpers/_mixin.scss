@use 'variable' as *;
@use 'breakpoint' as *;
@use 'function' as *;

$prefix-lists: 'webkit', 'moz'/*, 'ms', 'o'*/;
@mixin auto-prefix($name, $value) {
  @each $prefix in $prefix-lists {
    -#{$prefix}-#{$name}: $value;
  }
  #{$name}: $value;
}

@mixin ellipsis($lines: 1, $type: flexbox) {
  @if ($type: flexbox) {
    min-width: 0;
  }

  @if ($lines==1) {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    display: -webkit-box;
    overflow: hidden;
    text-overflow: ellipsis;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
  }
}

@mixin blind {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  border: 0;
  white-space: nowrap;
  clip: rect(0, 0, 0, 0);
}

@mixin clearfix {
  content: "";
  display: table;
  clear: both;
}

@mixin flex {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin flex-wrap($value) {
  @if ($value == wrap) {
    -webkit-box-lines: multiple;
  } @else if ($value == nowrap) {
    -webkit-box-lines: single;
  }
  -moz-flex-wrap: $value;
  -ms-flex-wrap: $value;
  flex-wrap: $value;
}

@mixin flex-dir($value) {
  @if ($value == row) {
    -webkit-box-orient: horizontal;
  } @else if($value == column) {
    -webkit-box-orient: vertical;
  }
  -moz-flex-direction: $value;
  -ms-flex-direction: $value;
  flex-direction: $value;
}

@mixin flex-justify($value) {
  @if ($value == flex-start) {
    -webkit-box-pack: start;
  } @else if ($value == flex-end) {
    -webkit-box-pack: end;
  } @else if ($value == space-between) {
    -webkit-box-pack: justify;
  } @else {
    -webkit-box-pack: $value;
  }
  -moz-box-justify-content: $value;
  @if ($value == flex-start) {
    -ms-flex-pack: start;
  } @else if ($value == flex-end) {
    -ms-flex-pack: end;
  } @else if ($value == space-between) {
    -ms-flex-pack: justify;
  } @else {
    -ms-flex-pack: $value;
  }
  justify-content: $value;
}

@mixin flex-align($value) {
  @if ($value == flex-start) {
    -webkit-box-align: start;
  } @else if ($value == flex-end) {
    -webkit-box-align: end;
  }
  -moz-align-items: $value;
  @if ($value == flex-start) {
    -ms-flex-align: start;
  } @else if ($value == flex-end) {
    -ms-flex-align: end;
  }
  align-items: $value;
}

@mixin flexitem($number) {
  -webkit-box-flex: $number;
  -ms-flex: $number;
  flex: $number;
}

@mixin flex-order($number) {
  -webkit-box-ordinal-group: $number;
  -ms-flex-order: $number;
  order: $number;
}

@mixin flex-auto {
  flex: 0 0 auto !important;
}

@mixin flex-group($dir: row, $justify-cont: flex-start, $align-item: center, $wrap: nowrap) {
  @include flex;
  @include flex-align($align-item);

  @if ($dir == column) {
    @include flex-dir($dir);
  }
  @if ($justify-cont != flex-start) {
    @include flex-justify($justify-cont);
  }
  @if ($wrap == wrap) {
    @include flex-wrap($wrap);
  }
}

@mixin radius($number) {
  @include auto-prefix(border-radius, $number);
}

@mixin circle {
  @include radius(50%);
}

@mixin bg-image($name, $path: "../../images/", $format: "svg") {
  background-image:url("#{$path}#{$name}.#{$format}")
}

@mixin bg($name, $path: "../../images/", $repeat: no-repeat, $pos: center, $size: 100%) {
  background: url("#{$path}#{$name}") $repeat $pos / $size;
}

// size
@mixin size($w, $h: false) {
  @if ($h == false) {
    width: $w;
    height: $w;
  } @else {
    width: $w;
    height: $h;
  }
}

@mixin button($wSize, $hSize, $radius: 0) {
  @include size($wSize, $hSize);

  @if ($radius != 0) {
    border-radius: $radius;
  }
}


@mixin inline-block($align: top) {
  display:inline-block;
  vertical-align: $align;
}

// supports not
@mixin supports-not($name, $value) {
  @supports not (#{$name}: #{$value}) {
    @content;
  }
}



// 최상위 부모에 클래스 추가 mixin
@mixin most-outer-selector($new-class) {
  $current-selector: &;
  $new-selector: [];

  @each $item in $current-selector {
    $first-item: nth($item, 1);

    $appended-item: $first-item + $new-class;

    $new-item: set-nth($item, 1, $appended-item);
    $new-selector: append($new-item, $new-selector);
  }

  @at-root #{$new-selector} {
    @content;
  }
}



// style
@mixin inner {
  position: relative;
  max-width: 1440px;
  margin: 0 auto;
}

@mixin header-main() {

}



// scroll custormizing
@mixin scroll($size: 6px, $scroll-color, $bg-color: transparet) { // scrollbar size, scrollbar color, scrollbar background color
  overflow: auto;

  &::-webkit-scrollbar {
    width:  $size;
    height: $size;
  }
  &::-webkit-scrollbar-thumb {
    background: $scroll-color;
    border-radius: 30px;
  }
  &::-webkit-scrollbar-track {
    background: $bg-color;
  }

  @content;
}


// space style
$max-gap: 30;
@mixin gap-classes {
  @for $i from 4 through $max-gap {
    .gap-#{$i} {
      gap: #{$i}px;
    }
  }
}
@include gap-classes;


// font style
$max-font: 30;
@mixin font-classes {
  @for $i from 10 through $max-font {
    .font-#{$i} {
      font-size: #{$i}px !important;
    }
  }
}
@include font-classes;


@mixin font($type) {
  // member title
  @if ($type == "title-main") {
    margin-bottom: 8px;
    font-size: 40px;
    line-height: 1.2;
    word-break: break-word;
    font-weight: $font-bold;
    letter-spacing: -0.8px;

    @include tablet {
      font-size: 24px;
      font-weight: $font-semibold;
    }
    
    @content;

  } @else if ($type == "sub-main") {
    font-size: 20px;
    line-height: 1.2;
    word-break: break-word;

    @include tablet {
      font-size: 16px;
    }

    @content;
  } // board title
  @else if ($type == "board-title-main") {
    font-size: 24px;
    
    @include tabletMin {
      font-weight: $font-semibold;
    }

    @include tablet {
      font-size: 20px;
    }
    
    @content;
  }
}

@mixin landing-text($type) {
  @if ($type == "heading-small") {
    // font-size: rem(40);
    font-size: clamp(18px, 2.604vw + 0.824rem, 4rem);
    font-weight: $font-semibold;
    line-height: 1.6;
    letter-spacing: -0.5px;

    @content;

    // @include tablet {
    //   font-size: rem(25.5);
    // }

  } @else if ($type == "heading-large") {
    // font-size: rem(48);
    font-size: clamp(20px, 3.314vw + 0.757rem, 4.8rem);
    font-weight: $font-bold;
    line-height: 1.2083;
    letter-spacing: -0.5px;

    @include tablet {
      // font-size: rem(28.4);
      letter-spacing: 0;
    }

  } @else if ($type == "sub-text") {
    // font-size: rem(20);
    font-size: clamp(16px, 0.473vw + 1.422rem, 2rem);
    line-height: 1.5;

    @include tablet {
      // font-size: rem(22.8);
    }
  }
}


@mixin input-font-style { // form-control custom font style
  font-size: #{$font-body-size}px;
  line-height: 1;
  color: var(--input-text-default-color);

  &::placeholder {
    color: var(--input-placeholder-color);
  }
}

@mixin btn-fill($bg-color, $text-color) {
  background-color: $bg-color;
  color: $text-color;
}

@mixin btn-outline($border-color, $text-color) {
  border:1px solid $border-color;
  background-color: #fff;
  color: $text-color;
}


// arrow
@mixin arrow($direction, $size,  $color) {
  @include size($size);

  position: absolute;
  border-style: solid;

  @if ($direction== top) {
    bottom: -#{$size};
    border-width: $size $size 0;
    border-color: $color transparent transparent transparent;
  } @else if ($direction== bottom) {
    top: -#{$size};
    border-width: 0 $size $size;
    border-color: transparent transparent $color transparent;
  } @else if ($direction== left) {
    right: -#{$size};
    border-width: $size 0 $size $size;
    border-color: transparent transparent transparent $color;
  } @else if ($direction== right) {
    left: -#{$size};
    border-width: $size $size $size 0;
    border-color: transparent $color transparent transparent;
  }
}


//
@mixin fixed-top {
  position: -webkit-sticky;
  position: sticky;
  top:0;
}

//
@mixin vertical-center {
  &::before {
    content: "";
    display: inline-block;
    height: 100%;
    vertical-align: middle;
    margin-left: -4px;
  }
}

@mixin make-col {
  @for $i from 1 through 12 {
    &-#{$i} {
      flex: 0 0 auto;
      width: calc((100% / 12) * $i) !important;
    }
  }
}

//
$closeTypes: (
  colors: (
    light: 'fff',
    dark: '1e1e1e',
    normal: '757575'
  ),
  sizes: (
    default: 36px,
    lg: 40px,
    sm: 20px,
    xs: 16px
  )
);
@mixin btn-close-colors($colors) {
  @each $type, $value in $closeTypes {
    @if($type == colors) {
      background-image: icon(icon-close, map-get($value, $colors));
    }
  }
}
@mixin btn-close-sizes($sizes) {
  @each $type, $value in $closeTypes {
    @if ($type == sizes) {
      @include size(map-get($value, $sizes))
    }
  }
}


//
@mixin backdrop-filter($blur) {
  -webkit-backdrop-filter: blur($blur);
  backdrop-filter: blur($blur);
}

//
@mixin mobile-header($type: sub) {
  z-index: var(--header-zindex);
  height: calc(var(--admin-header-height) * 1px);
  border-bottom: 1px solid transparent;
  background-color: $white-001;

  @if($type != main) {
    @include fixed-top;
    padding: 0 #{$mobile-common-side-space}px;
  }
}


//
@mixin btn-hover($color: $white-004) {
  @include tabletMin {
    &:hover {
      background-color: $color;
    }
  }

  @include tablet {
    &:focus {
      background-color: $color;
    }

    &:active {
      background-color: $color;
    }
  }
}


// margin
@mixin margin-bottom($desktop-margin, $mobile-margin) {
  @if ($desktop-margin == $mobile-margin) {
    margin-bottom: $desktop-margin;
  } @else {
    margin-bottom: $desktop-margin;
    
    @include tablet {
      margin-bottom: $mobile-margin;
    }
  }
}


@mixin table-header-style {
  height: calc(var(--card-table-header-height) * 1px);
  background-color: $skyblue-002;
  font-size: 14px;
  font-weight: $font-medium;
  line-height: 1;
  color: $table-header-text-color;
}


@mixin data-box-style {
  @include radius(calc(var(--data-box-radius) * 1px));

  // padding: calc(var(--data-box-vertical-space) * 1px) calc(var(--data-box-side-space) * 1px);
  border: 1px solid var(--data-box-border-color);
  background-color: $white-001;
}
